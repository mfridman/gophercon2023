// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: petstore/v1/pet.proto

package petstorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mfridman/gophercon2023/gen/petstore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// PetStoreServiceName is the fully-qualified name of the PetStoreService service.
	PetStoreServiceName = "petstore.v1.PetStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PetStoreServiceListPetsProcedure is the fully-qualified name of the PetStoreService's ListPets
	// RPC.
	PetStoreServiceListPetsProcedure = "/petstore.v1.PetStoreService/ListPets"
)

// PetStoreServiceClient is a client for the petstore.v1.PetStoreService service.
type PetStoreServiceClient interface {
	ListPets(context.Context, *connect.Request[v1.ListPetsRequest]) (*connect.Response[v1.ListPetsResponse], error)
}

// NewPetStoreServiceClient constructs a client for the petstore.v1.PetStoreService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPetStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PetStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &petStoreServiceClient{
		listPets: connect.NewClient[v1.ListPetsRequest, v1.ListPetsResponse](
			httpClient,
			baseURL+PetStoreServiceListPetsProcedure,
			opts...,
		),
	}
}

// petStoreServiceClient implements PetStoreServiceClient.
type petStoreServiceClient struct {
	listPets *connect.Client[v1.ListPetsRequest, v1.ListPetsResponse]
}

// ListPets calls petstore.v1.PetStoreService.ListPets.
func (c *petStoreServiceClient) ListPets(ctx context.Context, req *connect.Request[v1.ListPetsRequest]) (*connect.Response[v1.ListPetsResponse], error) {
	return c.listPets.CallUnary(ctx, req)
}

// PetStoreServiceHandler is an implementation of the petstore.v1.PetStoreService service.
type PetStoreServiceHandler interface {
	ListPets(context.Context, *connect.Request[v1.ListPetsRequest]) (*connect.Response[v1.ListPetsResponse], error)
}

// NewPetStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPetStoreServiceHandler(svc PetStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	petStoreServiceListPetsHandler := connect.NewUnaryHandler(
		PetStoreServiceListPetsProcedure,
		svc.ListPets,
		opts...,
	)
	return "/petstore.v1.PetStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PetStoreServiceListPetsProcedure:
			petStoreServiceListPetsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPetStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPetStoreServiceHandler struct{}

func (UnimplementedPetStoreServiceHandler) ListPets(context.Context, *connect.Request[v1.ListPetsRequest]) (*connect.Response[v1.ListPetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("petstore.v1.PetStoreService.ListPets is not implemented"))
}
